#!/usr/bin/env node
var debug = require('debug')('disruptit');
var app = require('../app');
var fs = require('fs');
var config = JSON.parse(fs.readFileSync('config.json'));

// app.set('port', process.env.PORT || 3000);

function approveDomains(opts, certs, cb) {
  // This is where you check your database and associated
  // email addresses with domains and agreements and such


  // The domains being approved for the first time are listed in opts.domains
  // Certs being renewed are listed in certs.altnames
  if (certs) {
    opts.domains = certs.altnames;
  }
  else {
    opts.domains = config.ssl.domains;
    opts.email = config.ssl.email;
    opts.agreeTos = true;
  }

  // NOTE: you can also change other options such as `challengeType` and `challenge`
  // opts.challengeType = 'http-01';
  // opts.challenge = require('le-challenge-fs').create({});

  cb(null, { options: opts, certs: certs });
}


var lex = require('greenlock-express').create({
  // set to https://acme-v01.api.letsencrypt.org/directory in production
  server: 'staging'

  // 10 days
  , renewWithin: 10 * 24 * 60 * 60 * 1000

  // If you wish to replace the default plugins, you may do so here
  //
  , challenges: { 'http-01': require('le-challenge-fs').create({ webrootPath: '/tmp/acme-challenges' }) }
  , store: require('le-store-certbot').create({ webrootPath: '/tmp/acme-challenges' })

  // You probably wouldn't need to replace the default sni handler
  // See https://git.daplie.com/Daplie/le-sni-auto if you think you do
  //, sni: require('le-sni-auto').create({})

  , approveDomains: approveDomains
});


// handles acme-challenge and redirects to https
require('http').createServer(lex.middleware(require('redirect-https')())).listen(80, '0.0.0.0',function () {
  console.log("Listening for ACME http-01 challenges on", this.address());
});

// handles your app
require('https').createServer(lex.httpsOptions, lex.middleware(app)).listen(443, '0.0.0.0', function () {
  console.log("Listening for ACME tls-sni-01 challenges and serve app on", this.address());
});
